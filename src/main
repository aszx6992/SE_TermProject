
public class main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Detect detect = new Detect();
		/*
		// doc1 test
		String[] test ={ "--------","\n","Task","------","* Markdown supports ordered (numbered) and unordered (bulleted) lists."
				, "* It’s important to note that the actual numbers you use to mark the list have"
				, "  no effect on the HTML output Markdown produces. The HTML Markdown produces"
				, "  from the above list is:"
				, "* If you instead wrote the list in Markdown like this"
				};
		*/
		/*
		// doc2 test
		String[] test = {"* Markdown supports ordered (numbered) and unordered (bulleted) lists."
				, "  + It’s important to note that the actual numbers you use to mark the list"
				, "  have no effect on the HTML output Markdown produces. The HTML Markdown"
				, "  produces from the above list is:"
				, "  + If you instead wrote the list in Markdown like this"
				};
		*/
		
		// doc3 test
		String[] test ={"### Things To be Written in Reports ####"
				,"- Requirement analysis (assignment 1)"
				,"- Design & Implementation"
				,"  - You will receive 5 sample markdown documents."
				,"    Your implementation must properly translate the 5 sample documents."
				,"- Testing: unit test the program with Ant &amp; JUnit &amp; JaCoCo."
				,"  - You must write test cases to achieve maximum branch coverage"
				,"- Report writing"
				,"  - All aforementioned steps must be clearly written in a report (8-10 pages)"
				,"\n"
				,"The code of your project should be maintained in [GitHub][1]."
				
		};
		
		/*
		// doc4 test
		String[] test ={"Overview"
				,"---------------"
				,"This assignment askes you to build a program that reads a **Markdown** file and converts it to a HTML file."
				,"> Markdown is intended to be as easy-to-read and easy-to-write as is feasible."
		};
		*/
		String buffer;
		String result = "init";
		// InString test 할지 안할지 정하는 거.
		boolean doNeedInString = true;
		
		for(int i=0; i<test.length; i++){
			//	System.out.println(test[i]);
		
			buffer = test[i];
			System.out.println(buffer);
		
			// 앞대가리 TEST
			// Line Check
			if(detect.isLine(buffer)){
				// here is in Line Case and do not need to do InString Test
				System.out.println("Here is in line Detect");

				doNeedInString = false;
			
				result = "<hr>";
			}
			// BLOCK TEST
			// List Check
			else if(detect.isList(buffer)){
				// here is in List Case and need to do InString Test
				System.out.println("Here is in list Detect");
				
				doNeedInString = true;
				
			}
			// InString Test only when doNeedInString is true
			if(doNeedInString == true){
				// instring method
				
				// update result
				result = buffer;
			}
		
			// Do Wrapping - List Case
			// new list
			if(detect.getStillInList()  == true
					&& detect.getJustNested() == false
					&& detect.getNestedWithSymbol() == false){
				System.out.println("Ready to transform in new list case");
				result = detect.transformToHTML(result, 0);
			}
			// just nested list
			else if(detect.getStillInList()  == true
					&& detect.getJustNested() == true
					&& detect.getNestedWithSymbol() == false){
				System.out.println("Ready to transform in just nested case");
				result = detect.transformToHTML(result, 1);
			}
			// nested list with symbol
			else if(detect.getStillInList()  == true
					&& detect.getJustNested() == false
					&& detect.getNestedWithSymbol() == true){
				System.out.println("Ready to transform in nested case with symbol");
				result = detect.transformToHTML(result, 2);
			}
			// not list
			else{
				// do nothing
				System.out.println("This is not list case. Do nothing.");
			}
		
			System.out.println("result : " + result);
			System.out.println();
		}
	}
}
